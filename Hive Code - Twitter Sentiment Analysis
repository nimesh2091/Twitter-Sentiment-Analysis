##### HIVE #####

create table tweets (json string);

load data local inpath 'Desktop/HW2/final.json' into table tweets;

create table tweet_text as
select v1.text,v2.location, trim(split(v2.location,",")[1]) as state, v2.name,v2.followers,v2.screen_name,v1.id,v1.created_at,v1.retweet_count from tweets jt
LATERAL VIEW json_tuple(jt.json, 'text','created_at','retweet_count','user','id_str') v1
as text, created_at, retweet_count,user,id
LATERAL VIEW json_tuple(v1.user, 'location','name','followers_count','screen_name') v2
as location,name,followers,screen_name;


#Q1.a

SELECT word, count(1) as wcount from  tweet_text t
LATERAL VIEW explode(split(regexp_replace(trim(upper(t.text)),"[^#A-Za-z0-9]"," "), ' ')) v1 as word
WHERE word rlike "^#[a-zA-Z0-9]+$"
GROUP BY word
ORDER BY wcount;



#Q1.b

select state, count(distinct screen_name) as users, count(text) as tweets from  tweet_text
group by state
order by users desc;



#Q1.c

select screen_name, max(followers) as follower_cnt from  tweet_text
group by screen_name
order by follower_cnt desc
limit 10;



#Q1.d

create table dictionary(word string,score int)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t';

load data local inpath 'Desktop/HW2/Dictionary.txt' into table dictionary;

create table tweet_words as 
select t.screen_name, t.id, t.text, t.created_at, v1.word from  tweet_text t
LATERAL VIEW explode(split(regexp_replace(lower(t.text),"[^#A-Za-z0-9]"," "), ' ')) v1 as word;

create table tweet_join as
select tweet_words.screen_name, tweet_words.id, tweet_words.created_at, tweet_words.text, tweet_words.word,dictionary.score
from tweet_words 
LEFT OUTER JOIN dictionary 
ON(tweet_words.word=dictionary.word);

create table tweet_score as 
select t.screen_name, t.id, t.created_at, t.text, SUM(t.score) as tweet_score
from tweet_join t
GROUP BY t.screen_name, t.id, t.created_at, t.text;

alter table tweet_score add columns (sentiment string);

INSERT OVERWRITE TABLE tweet_score
SELECT screen_name,id,created_at,text,tweet_score, case when tweet_score>=0 then'POSITIVE' 
when tweet_score<0 then'NEGATIVE'end as sentiment
from tweet_score;

create table tweet_date as
select *,
substr(created_at,9,2) as dd, substr(created_at,length(created_at)-3,4) as yyyy,
case when  substr(created_at,5,3) = 'Jan' then '01'
when  substr(created_at,5,3) = 'Feb' then '02'
when  substr(created_at,5,3) = 'Mar' then '03'
when  substr(created_at,5,3) = 'Apr' then '04'
when  substr(created_at,5,3) = 'May' then '05'
when  substr(created_at,5,3) = 'Jun' then '06'
when  substr(created_at,5,3) = 'Jul' then '07'
when  substr(created_at,5,3) = 'Aug' then '08'
when  substr(created_at,5,3) = 'Sep' then '09'
when  substr(created_at,5,3) = 'Oct' then '10'
when  substr(created_at,5,3) = 'Nov' then '11'
when  substr(created_at,5,3) = 'Dec' then '12'
end as mm
from tweet_score;

alter table tweet_date add columns (date string);

INSERT OVERWRITE TABLE tweet_date 
SELECT screen_name,id,created_at,text,tweet_score,sentiment,dd,yyyy,mm,concat(yyyy,'-',mm,'-',dd) as date FROM tweet_date; 

select screen_name,id,date,text,tweet_score,sentiment from tweet_date
order by tweet_score desc limit 5;

